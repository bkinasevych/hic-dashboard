---
format:
  html:
    toc: true
  pptx:
    slide-level: 2
output-file: index
format-pptx:
  output-file: slides
execute:
  warning: false
  echo: false
---


```{r}
# load packages
library(tidyverse)
library(janitor)
library(scales)
library(ggrepel)
library(Microsoft365R)

dark_blue <- "#33376B"
grey_blue <- "#ADB1CF"
light_blue <- "#84D6D4"
dark_grey <- "#545454"
light_grey <- "#BFBFBF"
cream <- "#EDE8DB"

plot_theme <- function() {
  theme_minimal(base_family = "Encode Sans", base_size = 11, ink = dark_blue) +
    theme(
      panel.border = element_blank(),
      plot.background = element_rect(fill = cream)
    )
}
```

```{r}
# get data from Sharepoint

site <- get_sharepoint_site(site_name = "Health in Common Team Site")

projects_list <- site$get_list("tbl_projects")
fees_list <- site$get_list("tbl_fees")

projects <- as_tibble(
  projects_list$list_items(
  filter = NULL,
  select = NULL
))

projects <- projects |> 
  rename("project_id" = id)

fees <- as_tibble(
  fees_list$list_items(
  filter = NULL,
  select = NULL
))

fees <- fees |> 
  rename("fee_id" = id,
         "project_id" = project_idLookupId)
```


```{r}
# load projects data
projects <- projects |> 
  clean_names() |> 
  select(
    project_id,
    request_date,
    project_name,
    service_type,
    decision,
    status
  ) |>
  mutate(request_date = as_date(
    ymd_hms(request_date)
    )) |>
  # add quarter and fiscal year columns
  mutate(
    quarter = case_when(
      month(request_date) < 4 ~ 4,
      month(request_date) > 3 & month(request_date) < 7 ~ 1,
      month(request_date) > 6 & month(request_date) < 10 ~ 2,
      TRUE ~ 3
    )
  ) |>
  mutate(
    fiscal_year = case_when(
      quarter == 4 ~ year(request_date) - 1,
      TRUE ~ year(request_date)
    )
  ) |>
  mutate(fiscal_year = factor(fiscal_year)) |>
  # recode service type
  mutate(
    service_type = case_when(
      service_type %in% c("Strategic planning", "Program evaluation") ~
        service_type,
      TRUE ~ "Other"
    )
  ) |>
  mutate(
    service_type = factor(
      service_type,
      levels = c("Program evaluation", "Strategic planning", "Other")
    )
  )


# load fees data
fees <- fees |>
  clean_names() |>
  select(fee_id, payment_date, payment_due, project_id) |>
  mutate(payment_date = as_date(
    ymd_hms(payment_date)
    )) |>
  mutate(
    quarter = case_when(
      month(payment_date) < 4 ~ 4,
      month(payment_date) > 3 & month(payment_date) < 7 ~ 1,
      month(payment_date) > 6 & month(payment_date) < 10 ~ 2,
      TRUE ~ 3
    )
  ) |>
  mutate(
    fiscal_year = case_when(
      quarter == 4 ~ year(payment_date) - 1,
      TRUE ~ year(payment_date)
    )
  )


# add service type to project fees
service_type <- projects |>
  select(project_id, service_type)

fees <- fees |>
  left_join(service_type) |>
  mutate(
    service_type = factor(
      service_type,
      levels = c(
        "Program evaluation",
        "Strategic planning",
        "Other"
      )
    )
  )
```

## Number of service requests per fiscal year and quarter
```{r}
plot_data <- projects |>
  filter(fiscal_year %in% c("2020", "2021", "2022", "2023", "2024", "2025")) |>
  group_by(fiscal_year, quarter) |>
  count(name = "n") |>
  ungroup()

label_data <- plot_data |>
  group_by(fiscal_year) |>
  slice_tail(n = 1) |>
  ungroup() |>
  rename(x = quarter, y = n)


ggplot(
  plot_data,
  aes(x = quarter, y = n, colour = fiscal_year, group = fiscal_year)
) +
  geom_line() +
  geom_point() +
  geom_text_repel(
    data = label_data,
    aes(x = x, y = y, label = fiscal_year, colour = fiscal_year),
    inherit.aes = FALSE,
    show.legend = FALSE
  ) +
  scale_color_manual(
    values = c(
      "2020" = "grey",
      "2021" = "grey",
      "2022" = "grey",
      "2023" = "grey",
      "2024" = "grey",
      "2025" = dark_blue
    )
  ) +
  labs(x = "Quarter", y = "# of service requests") +
  plot_theme() +
  theme(
    panel.grid.minor.x = element_blank(),
    panel.grid.major.x = element_blank(),
    legend.position = "none"
  )
```

## Fees committed per fiscal year
```{r}
fees_by_fiscal <- fees |>
  group_by(fiscal_year) |>
  summarize(revenue = sum(payment_due)) |>
  filter(fiscal_year > 2020 & fiscal_year < 2026)

fees_by_fiscal |>
  ggplot(aes(x = fiscal_year, y = revenue)) +
  geom_col(fill = dark_blue) +
  geom_text(aes(label = dollar(revenue)), vjust = -0.5) +
  labs(x = "", y = "") +
  plot_theme() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.text.y = element_blank()
  )
```

## Number of service requests per fiscal year by type
```{r}
plot_data <- projects |>
  filter(fiscal_year != "2014", fiscal_year != "2015") |>
  group_by(fiscal_year) |>
  count(service_type) |>
  ungroup()

ggplot(data = plot_data, aes(x = fiscal_year, y = n, fill = service_type)) +
  geom_col() +
  scale_fill_manual(
    values = c(dark_blue, light_blue, light_grey)
  ) +
  labs(y = "# of service requests", x = "Fiscal Year", fill = "") +
  plot_theme() +
  theme(
    panel.grid.major = element_blank()
  )
```



## Fees committed per fiscal by type of project

```{r}
# total fees committed per fiscal year by project type
fees |>
  filter(fiscal_year > 2020 & fiscal_year < 2026) |>
  select(fiscal_year, payment_due, service_type) |>
  group_by(fiscal_year, service_type) |>
  summarize(revenue = sum(payment_due, na.rm = TRUE)) |>
  ggplot() +
  geom_col(aes(x = fiscal_year, y = revenue, fill = service_type)) +
  scale_fill_manual(
    values = c(dark_blue, light_blue, light_grey)
  ) +
  geom_text(
    data = fees_by_fiscal,
    aes(x = fiscal_year, y = revenue, label = dollar(revenue), vjust = -0.5)
  ) +
  labs(
    x = "",
    y = "",
    fill = ""
  ) +
  plot_theme() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.text.y = element_blank()
  )
```


## Total fees committed in first two quarters of fiscal
```{r}
fees |>
  filter(quarter < 3) |>
  group_by(fiscal_year) |>
  summarise(revenue = sum(payment_due)) |>
  filter(fiscal_year %in% c("2023", "2024", "2025")) |>
  ggplot(aes(x = fiscal_year, y = revenue)) +
  geom_col(fill = dark_blue) +
  geom_text(aes(label = dollar(revenue)), vjust = -0.5) +
  labs(y = "", x = "") +
  plot_theme() +
  theme(
    axis.text.y = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )
```

## Fees paid by project per fiscal

```{r}
project_name <- projects |>
  select(project_id, project_name)

fee_distribution <- fees |>
  left_join(project_name) |>
  filter(fiscal_year > 2020 & fiscal_year < 2026) |>
  select(fiscal_year, payment_due, project_name) |>
  mutate(label = case_when(
    payment_due > 30000 ~ project_name,
    TRUE ~ NA
  )) |> 
  mutate(label = str_wrap(label, width = 20))

fee_distribution |> 
  ggplot(aes(
    x = fiscal_year,
    y = payment_due
  )) +
  geom_point(
    alpha = 0.3,
    colour = dark_blue
  ) +
  geom_text_repel(aes
            (label = label),
            size = 3,
            colour = dark_blue,
            min.segment.length = 0.2
  ) +
  scale_y_continuous(labels = dollar_format()) +
  labs(
    x = "",
    y = "",
    title = "",
    caption = "The labeled points are fees over $30,000"
  ) +
  plot_theme() +
  theme(
    panel.grid.major = element_line(colour = light_grey,
                                    linewidth = 0.25),
    panel.grid.major.x = element_blank()
  )
```

## Average fees per fiscal by service type

```{r}
service_type <- projects |> 
  select(project_name, service_type, project_id)

fees |> 
  select(project_id, fiscal_year, payment_due) |> 
  left_join(service_type) |> 
  group_by(fiscal_year, service_type) |> 
  filter(service_type != "Other") |> 
  summarize(avg = mean(payment_due)) |> 
  filter(fiscal_year > 2020, fiscal_year < 2026) |> 
  ggplot(aes(x = fiscal_year,
             y = avg,
             fill = service_type)) +
  geom_col(position = "dodge") +
  scale_fill_manual(values = c(dark_blue, light_blue)) +
  scale_y_continuous(labels = dollar_format()) +
  labs(x = "",
       y = "Average fees",
       fill = "") +
  plot_theme() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor.x = element_blank()
  )
  
  

```

